Data : Datum의 복수형
Single Sign On(SSO) : 로그인을 하나만 하여도 두가지의 시스템에 동시 로그인을 능하게 한다.
Management Information System(MIS) : 경영 직원들에게 도움이 되는 정보 시스템
Decision supporting System(DSS) : 최고경영자의 경영 의사결정을 도와줄 정보를 제공

Data processing
Off-line : batch(일괄 처리 : 모아서 한번에 처리)
On-line : interactive(상호작용형)

interactive와 비슷한 이름인 real-time(Deadline존재, 이것을 지켜야하는 것) ex)미사일이 충돌하기 전까지 계산해야 하는 시간

오프라인이지만 real-time인 경우는 없고, 온라인이지만 일괄처리 하는 경우도 있다.

Centralized computing(Processing) : 중앙집중형
De-centralized computing(Processing) : 한 조직체 안에서 여러 곳으로 나누어 처리하는 것
Distributed computing : 엄격한 의미의 분산으로, de-centralized된 것들 중 location transparency가 있는것, 즉 데이터가 분산되어있어도 결국
하나의 큰 시스템으로 정보가 어디서 처리되는 지 사람이 알 수 없어도 알아서 처리해 주는 것(병행 시스템과는 다르다)
  -> 처리 공간이 나뉘어 있으므로 서로 데이터를 전송할 경우 delay가 존재할 수 있다.
  
Parallel computing : 여러 곳에서 동시에 데이터를 처리한다. 동기화 되어서 동시에 처리되기 때문에 하나가 다운되면 모두 같이 죽는 경우가 있다.

서버와 클라이언트 사이에 미들웨어가 중간에서 전송을 돕는 3-tier 구조가 대부분이다.
consistency(일관성) ex)학생 집계 수와 실제 집계 수가 다른 경우가 있으면 안된다.
security(보안성)    ex)미 회사들은 중국 입국 시 노트북 데이터를 다 삭제하고 들어가서 클라우드로 받는다.
economics(경제성)   ex)거주지 이전이나 정보처리 부분에서 경제적 편리함을 얻게 되는 경우(일을 두번 할 필요가 없는)
integrity(무결성)   ex)일관성은 데이터가 여러 곳에 위치해도 일치하는 것을 말하고, 무결성은 데이터가 변조되거나 잘못 처리되어 사용에 지장이 생기지 않는 것.

DBMS(Datebase Management System)은 데이터 독립성을 만들어 주는 게 목표이다. (종속성과 중복성을 최소화하여 좋은 데이터베이스를 만들어야 한다.

Data definition(DDL) : 다양한 형태의 데이터 구조를 지원할 수 있도록 가장 적절한 데이터베이스 구조를 정의할 수 있는 기능
Data manipulation(DML) : 쉽게 이야기하자면 인터페이스를 조작하게 하기 위한 기능
Data control(DCL) : 1. integrity, 2.security, 3.concurrency control, 4. recovery ( Transaction management)를 지키는 역할

DDL관리자(DBA)는 전체 정의부터 관리할 수 있다.

저장 데이터베이스가 바뀌어도 위 단계의 시스템에 영향이 없어야 한다 -> 물리적 데이터 독립성
DBMS가 관리하는 DB에는 두가지가 있는데, 1. 사용자가 사용하는 데이터, 2. DBMS가 데이터를 참조하는데 쓰는 데이터(Data dictionary)이다.
시스템만 사용하는 것은 Data directory이다.

데이터 회복의 단위는 transaction이다. ex) 은행업무 출금 중 돈을 다 빼지 않았는데 정전으로 인해 문이 닫겨서 인출이 다 되지 않았음에도, 통장에는 모두
인출된 것으로 나타나게 되는 경우 방지

대형DB를 리눅스환경에서 구성하면 관리가 편하긴 하나 효율이 잘 나오지 않는다.(텐덤같은 경우가 효율이 잘 나온다)
Front-end + Back-end   computer
  기타작업  + 본 관리작업
  
Data motel
  - Conceptual Data Model (사전작업으로 그린것 같은 느낌)
  - Logical Data Model (보통 데이터모델을 말할 때를 의미) => E + R Data model, 다른 모델들도 있고 변병도 많이 존재함.
  E : Entity
  R : Relation
  
개념적 데이터 모델 중 가장 많이 사용되는 Data Model = E-R Data model

Relation << key라는 것이 중요하다.
갸념적 데이터 모델인 E-R 모델에서는 Relation(논리적 모델)으로부터 거꾸로 올라가서 수정되는 경우가 있다.
  - 어떻게 설계(모델링)를 하더라도 실 세계에 완벽하게 부합되어 설게(모델링)되지는 않으며, 주관성이 많이 개입되어 있다. 그렇다 하더라도 상대적으로 비교해보면
    더 잘 설계(모델링)된 것은 존재하며 경험을 쌓다 보면 대부분 판별된다.
    
 학생(or 재학생), 과목, 교수, ... : 이러한 것은 entity(개체)라고 한다. 단독(독립적)으로 존재하는 정보단위이며, 다른 정보의 수정, 삭제 등에 영향을 받지
 않고 그 자체로서 DB내에 존재할 가치가 있는 정보단위
 1. 그 자체의 존립성
 2. 유의미성
 3. 구별성
 ex) 교수를 지우거나, 과목이 폐강되거나, 학교 행정이 바뀌어도 학생 정보는 DB에 존재해야 한다.
 전화번호, 주소 등의 값의 단위는 entity보다 attribute가 된다. 누군가의 전화전호, 주소가 되기 때문.
 
 Entity : 학생, 교과목, 교수, ...
 Relationship : Entity 사이에 생기는 정보 ex)학생 - 등록 - 과목 -> 다리가 2개 또는 그 이상이며 각 다리(link)는 Entity에 연결된다.
 Type : 학생, 교과목, 교수 라는 Entity타입(비유하자면 class)
 set : 집합
 instance : 인스턴스
 
 현실은 인스턴스만 존재하고, 묶어서 집합으로 생각한다.
 
오해
  1. ER-D는 Flow-chart가 아니다.
  2. ER-D는 기관/회사 조직도가 아니다.
  3. 절대적 존재(1인칭 시점) => 다른 조직체를 끌어들여선 안된다.
인스턴스간의 연관성이 있는 것을 타입으로 그린 것이지, 개념 자체의 연관성이 아니다.
어떠한 대상 자체의 이름은 타입이 아니라 인스턴스이다.
그릴 때는 인스턴스 값들의 연관성에 대해서 타입 레벨로 표현한다.

Relationship을 만드는 가장 중요한 기준 -> 사상의 원소 수(함수성)
N : M
1 : N
1 : 1

다 : 다 는 제약조건이다. 조건의 상한선을 풀어줌으로서(여러개이어야 한다는 의무가 아니라) 여러개가 연결되도 되고 하나만 연결해도 된다.
표현력은 다 : 다 가 좋지만 현실적으로 구현하기엔 안되는 모델도 있고 쉽지 않다.

NULL은 0이 아닌 값 자체가 없음을 표현함.(해당 회사가 그 정보를 담을 것인지)

계층 데이터 모델 : 트리 기반으로, 자료구조에서 초점이 맞춰졌다.
스키마 구조 자체가 트리모양이며, 질의어가 프로그램언어가 된다.

네트워크 데이터 모델에선 키 값이 중요하다.
특정한 구분되는 키값을 정해서 관계별 값이 정할 때마다 키값을 이용한다.
값으로 따라가야 해서 이중, 삼중 루프를 돌아서 시간이 오래걸리지만, 표현력은 굉장히 좋다.
키로 연결되지 않으면 시스템이 깨진다.


Data model
S(Structure) : 구조
O(Operation) : 연산
C(Constraint): 제약조건
==> Relational Data Model
여기에서 Relation은 수학에 가까운 표현으로, 집합론에서 사용되는 Relation이라는 단어를 사용한 것이다.
Set : element의 모임.
1. 중복이 있을 수 없다(Uniqueness)
2. 순서에 상관이 없다(Unordered)
집합의 표현 방법 : {a,b,c}, 벤다이어그램, {x|x는 내가 가본 유럽 도시} < 조건제시법
집합의 곱셈은 나올 수 있는 모든 가능한 값들의 집합이다.
Cartesian Product의 부분 집합을 Relation이라고 한다. 데이터베이스 내에 모든 나오는 값들은 이 Relation안에서 나오게 되어 있다.

< x1, y1 > -> tuple이라고 한다.
< x1, y2 >
< x1, y3 >
< x2, y1 >
=>
< x1, y1, z1 > -> cardinality
< x1, y2, z1 > -> x1과 같은 원소는 X라는 집합에서 유래되었는데, a값을 주면 b값이 나온다 라는
< x1, y3, z1 >    정의가 있는데, 정의해 놓은 valid한 값의 X의 부분을 정의역이라고
< x2, y1, z1 >    한다. (Definition Domain)

수학적으로 보았을 때 Cartesian Product에서 공집합을 포함한 모든 값은 Relation이다. 타입이 같다는 것은 Degree가 같다는 것이고, 각각의
Domain이 같은 것이다. 집합의 연산을 흉내내면 동일하다고 봐도 무방하다.
 
 Relation Scheme : 릴레이션이 관계적 구조를 내포하고 있는 것.(Intension)
   => 학생(학번, 이름, 학년)
   -> 정적 성질 = 시간에 무관하다. 데이터가 바뀌어도 구조는 바뀌지 않는 것.
 
 Relation Instance : Relation의 수학적 발현, (Extension) = tuple의 집합
   =>  <, < >, > 투플의 집합
   -> 동적 성질 = 시간에 따라 변한다. 값의 삽입, 삭제, 갱신 적용
   
현실      ER모델       R,D,M(관계 모델 = Relationship의 관계와는 다르다)
a b c    entity
x y z    type        - Relation Schema
         set         - Relation Instance
         Instance    - Relation Tuple
         
         Relationship
         Type         - Relation Schema
         Set
         Instance
         
 ER모델에서 실질적인 관계모델로 넘어가게 되는 경우에서는, ER모델에서 Entity와 Set을 이용하여 표를 만들어서 Relation tuple로 표현하게 된다.
 값들을 구별해줄 key를 미리 뽑아두고 설정하여 불러올 시에 이용한다. 기본적으로 사용하는 키를 Primary Key(PK)라고 부른다.
 
 Relationship을 관계 모델에서 표현 시에 각각의 key값을 가져오면 된다. (3주으 다중 다 가능) + 자체의 인스턴스까지 써야 한다.( 값을 가리키기 위해 key
 값을 쓴 것이고, 이 키 이름을 외래 키(foreign key)라고 부른다.
 슈퍼 키는 애트리뷰트를 포함하여 유일성이 보장되지만 최소성은 보장되지 않는 키를 말한다.
 보통의 key는 candidate key를 부르는 것이고, super key는 별도로 본다.
 후보 키 중에 하나를 고르면 primary key가 된다. 그리고 나머지 키는 alternate key라고 한다.
 
 같은 relation 내에 외래키와 기본키가 다 존재할 수 있다. (한 릴레이션 안에서 다른 투플을 가리키는 경우가 있을 수 있다)
 
 비어있는 키 값이 있는 데이터를 받아서는 안된다. 구분이 되지 않기 때문에 사용이 불가능하기 때문이다. 이것을 무결성이라고 하고 이것이 지켜져야 한다 (기본키에
 대한 제약조건)
 만약 수강한 과목이 없어져 있는데 학생에겐 그 신청한 값이 남아있으면 안된다. 이것을 참조 무결성 이라고 한다.(왜래 키에 대한 제약조건)
 
 Query - 비절차적 DML
 DSL   - 절차적 DML(프로그래머가 주로 사용)
 
R u S -> 합집합(union) = { t | t 는 R의 원소 V  t 는 S의 원소} 상한
R n S -> 교집합       = { t | t 는 R의 원소 n  t 는 s의 원소} R과 S중 최소가 교집합보다크다
R - S -> 차집합       = { t | t 는 R의 원소 n t 는 s의 원소가 아님}
여집합을 논할 시에 여집합에 대해서 값 자체를 쓰지 않은, NULL값의 데이터들에 대해서 잘 다루어야 한다.

Compatible : 호환성

교환법칙은 피연산자간의 우선순위, 결합법칙은 연산자간의 우선순위를 다룬 것이다.
