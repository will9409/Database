하나의 릴레이션에서
투플중에서 원하는 값이 있는대로만 뽑고싶은것- > selection
attr의 정보들만 뽑아내는것 - > projection

명령어 show databases;
Use world;Show tables;

셀렉션 -> 시그마 사용

시그마 셀렉션조건 (대상 R)

셀렉션 : 투플을 골라내는 연산이다. 카디널리티만 달라지는 부분집합이 되는 것이다.

S(성별=’여’)(학생)
시그마 predicate Relation

S(학년=’4’)(학생)    =>따옴표가 있을수도있고 없을수도있다. 따옴표의경우는 스트링이라는 가정이 있어야 한다.



프로젝션 : 원하는 애트리뷰트만 뽑는다. => 애트리뷰트를 알거나 애트리뷰트에 속해있는 튜플에서 그 애트리뷰트값만 알 수 있다. (많은 애트리뷰트들 필터링 가능)
파이 (조건) (R)
파이 (학번  ) (학생)

컴퓨터과 학생들에 대해서 학번을 뽑으라면
셀렉트(학년=4) (셀렉트(성별=’여’)(R))

&&대신 ㅅ사용해서 쓴다.
셀렉트(성별=’여’ ㅅ 학년=4)(학생)

프로젝션에서는 ㅠy(ㅠx(r))일때 y는 x에 포함되어있다. ( y  ㄷ=  x)
그러므로 y와 x가 바뀔 경우에는 x와 y가 같은 경우가 아니면 될 수 없다.
= ㅠy(r)


ㅠ(학년)(학생)
학년
< 4 >
< 3 >
< 1 >
< 4 >
< 2 >
에서 투플이 이런식으로, 수학적, 이론적으로 나올 수 없다.
그러므로 중복된 4를 지우게 된다. 집합에서는 어느것이 사라지던지 하나만 있으면 되므로 아무거나 지우면 된다.
학년
< 4 >
< 3 >
< 1 >
< 2 >
현재 릴레이션에 한명이라도 있는 학년을 의미하는 것이다.

SQL에서는 중복을 지우지 않고 남긴다.

셀렉션(중간성적>=90)(등록)
=>SQL에서는 >=와같은 등호 사용이 불가능하다

> = < 이와 같은 부호들을 Theta라고 표기한다. 
같은 투플이 아니면 중복제거가 안되므로, 같은 학번이여도 과목번호가 다르게 두가지가 들어가 있는 투플은 중복이 아니게 되어 제거가 되지 않게 된다.

주어진 애트리뷰트값과 비교
애트리뷰트 자기 자신값과 비교

두가지가 가능하다. 모든값은 애트리뷰트로만 비교할 수 밖에 없다. 
프로젝션을 하고 셀렉션을 하면 셀렉션에 포함되는 애트리뷰트값이 사라져 있을 수 있다. 그래서 보통은 프로젝션을 하고 셀렉션을 하는 것이 일반적이라고 보면 된다.

조인 : 릴레이션 두개를 조합하는것. 외래 키를 통하여 판단할 시 필요한 연산.
직원번호    성명    부서코드    직책    부서명   예산
101      강철중     D11      주임    학생과   1000
101      강철중

C413을 듣는 학생들의 이름을 찾는 경우
프로젝션(이름)(셀렉션(C413)(등록J (학번 = 학번) 학생)) 
여기서 데이터베이스에 대해서 뽑으라고 한다면 맨 뒤 학생 뒤의 ) 뒤에 조인을 한번 더 하면 된다.
학번 과목번호 로 이루어진 애트리뷰트를 과목번호로 나누면 학번이 나온다.(디비전)
ㅠ(학생과목번호)(등록) / ㅠ(과목번호)(과목)

테이블 만들시
Create table
제거
Drop table
구조 변경
Alter table

CREATE TABLE 이름
(
 Ex => 이름 타입 기타옵션
애트리뷰트 선언
학번 Integer NOT NULL (더 있을시 콤마),
이름 CHAR ( 8 ) <= 한글 4자까지를 의미 ,
학년 INTEGER,
학년 or CHAR(1)
기본키 선언
PRIMARY KEY( 학번 )
외래키 선언 
)
문장 끝마다 ;을 붙이는데, 시스템에 따라 해석이 다르다.
;이 빠져도 문장으로 인정하기는 하나, ;이 빠지면 심사시에 틀렸다고도 한다.
세미콜론을 안붙이면 기억만 하고있다가 run을 하면 전부 실헹한다. ;을 붙이면 기억하고 실행도 바로 한다. 
즉 문장으로 쓰이긴 하지만 바로 실행되지 않는 부분도 있는 것.

DESC = DESCENDING ORDER
SELECT 학생.학번, 학생.이름
FROM 학생, 등록, 과목
WHERE 학생.학번=등록.학번
        AND 등록.과목번호 = 과목.과목번호
        AND 과목.과목이름 = ‘데이타베이스’;

데이터베이스 과목을 듣는 학생을 학생,학번,등록 테이블에서 학번,이름을 뽑아라

SELECT CNO, AVG(FINAL) 평균
FROM 등록
WHERE 과목번호=’C413’;
=> 과목번호 평균
    C413    AVG(FINAL)
==> 등록 테이블에서 과목번호 C413의 과목번호와 기말 평균값을 뽑아라

NULL  1. Unknown
      2. Inapplicable

최소한 한 과목을 수강하는 학생의 학번을 검색하라
SELECT DISTINCT(중복제거) E.SNO
From ENROL E
(where 없이 가능)

DB나 OS를 수강하는 학생의 학번
SELECT E.SNO,
FROM COURSE C, ENROL E
WHERE C.CNO=E.CNO
  AND (C.CNAME = ‘DB’)
   OR (C.CNAME = ‘OS’);

DB와 OS를 수강하는 학생의 학번
SELECT E1.SNO
FROM ENROL E1, ENROL E2, COURSE C1, COURSE C2
WHERE (E1.CNO = C1.CNO
   AND C1.CNAME = ‘DB’)
  AND (E2.CNO = C2.CNO
        AND C2.CNAME = ‘OS’)
  AMD (E1.SNO = E2.SNO)








DB를 수강하지 않는 학생의 학번 => 전체학생에서 db듣는학생들을 빼야함
SELECT S.SNO
FROM STUDENT S
EXCEPT (SELECT SNO
FROM ENROL E, COURSE C
WHERE C.CNO=E.CNO
  AND (C.CNAME = ‘DB’));

모든 개설 과목을 수강하는 학생의 학번
STUDENT 학생.학번
FROM 학생
WHERE NOT EXISTS(
        SELECT 과목.과목번호
        FROM 과목
        WHERE 안듣는과목
                -> NOT EXISTS (
                         SELECT 등록.과목번호
                          FROM 등록
                         WHERE 등록.학생번호 = 학생.학생번호
                           AND  등록.과목번호 = 과목.과목번호

9학점 이상을 수강하지 않는 학생의 학번
SELECT E.학번
FROM 등록 E
WHERE  <= (SELECT SUM(C.학점수)
             FROM 과목 C
             WHERE E.과목번호 = C.괴목번호
             GROUP BY (E.학번);
             
Create table _       => _는 base table이라고 부른다.(기본 테이블)  -> 가짜 테이블도 있다는 뜻
{
}

가짜테이블은 명령문은 쓸수있지만 실체가 없다. 이것을 virtual table이라고 부르고 SQL VIEW라고 한다.
VIEW에서 또 VIEW를 만들 수 있고, 또한 조합으로도 만들 수 있다. 실체는 없고 데이터는 3-level schema에 들어가있다. 
SQL에서 두가지 모드로 나뉨 (Dual Mode)
-Data SubLanguage   -> Embedded SQL(ESQL) (Query포함, +알파)
-Query

c언어로 프로그램을 만들었고, 데이터베이스에서 내용을 불러와야해서 SQL문을 적었는데, 당연히 오류가 날 것이다. 
이것을 해결하려면 이 SQL문을 임베디드 SQL이라고하고 C언어로 바꾸게끔 precompiler가 하게끔 만들어야한다. 
EXEC SQL을 쓰고 그 뒤에 select ..문을 사용하면 된다.
SQL문안에 프로그램내의 변수를 쓰고싶다면, : 를 써서 하면 된다. (C언어는 host언어이다)
특정언어의 Pre-processor가 있으면 그 특정언어로 짜도 된다. 

최소한의 SQL문 문법 오류판별 기능을 위해서 declare section이 존재한다.
EXEC SQL BEGIN DECLARE SECTION;으로 시작
Int t ;
...
EXEC SQL END DECLARE SECTION;
이것도 SQL문이다.
EXEC SQL select ...
위 언어가 가미되어서 컴파일될때 수정된 소스의 컴파일러에서 라이브러리 호출을 하게 된다. 
그 정보가 호스트 언어의 컴파일러가 처리하면 main memory의 프로세스로 넘어가서 runtime library를 호출하여 DBMS에게 넘겨준다.
SESC SQL문이 C언어 안에 넣어져서 사용될 수 있다. If else if while ... 다 가능하다.
Main memory에 통신영역이 있어서 return 0과 비슷한 느낌으로 알려주는 시스템이 있다.
3세대 C언어 종류는 절차지향언어로 한줄씩 처리하지만, SQL은 4세대 언어(비절차 명세형)로 투플같은 단위로 한번에 데이터를 여러개를 처리하기 때문에 
서로 특성이 다르다.
지금 막 검색을 끝낸 자료들을 active set이라고 하는데, 통신영역으로부터 확인이 되었으면 3세대 언어에 맞게 액티브셋에서 자료 하나씩 프로세스로 넘긴다. 
이 자료 하나씩 가리키는 것을 cursor라고 한다. 이것을 통해 하므로 커서를 연다/닫는다 라고 표현한다.

3과목 이상
Select sno
From 등록
Shere 
Group by sno
Having count(*) >= 3;

부속질의문을 이용한 레코드 삽입
Insert
Into
Select 
From where
실제 테이블에서 새로운 테이블을 만들어서 그 자료를 그대로 가져다 넣는 것을 스냅샷 이라고 함.
뷰와는 다르게 실제로 존재한다.
뷰는 실제로 값을 보려면 없다.
Transaction 
-> SQL문장 하나하나가 그 작업의 단위가 아니고, 여러가지 복합적인 작업들이 하나의 큰 작업으로 묶이는 것을 말한다. 
예를들면 송금중에 시스템이 셧다운되는 경우 데이터베이스에선 작업이 되었지만 고객차원에서는 작업이 된게 아니다. 
이러한 경우를 대비해서 하나의 큰 작업의 단위로 처리하게 되는 것을 말한다.
OLTP(Online Transaction Process) -> 은행처리 등
